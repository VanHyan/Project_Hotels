let DataTypes,Model,db,Users;_4de‍.x([["default",()=>_4de‍.o]]);_4de‍.w("sequelize",[["DataTypes",["DataTypes"],function(v){DataTypes=v}],["Model",["Model"],function(v){Model=v}]]);_4de‍.w("../services/db",[["default",["db"],function(v){db=v}]]);_4de‍.w("./Users",[["default",["Users"],function(v){Users=v}]]);



class Hotels extends Model {

}

Hotels.init({
  id: {
    type: DataTypes.BIGINT.UNSIGNED,
    autoIncrement: true,
    primaryKey: true,
  },
  hotelName: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  address: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  hotelStar: {
    type: DataTypes.FLOAT,
    allowNull: false,
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: false,
  },
  location: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  region: {
    type: DataTypes.NUMBER,
    allowNull: true,
  },
}, {
  tableName: 'hotels',
  modelName: 'hotels',
  sequelize: db,
  timestamps: false,
});

Hotels.belongsTo(Users, {
  as: 'users',
  foreignKey: 'userId',
  onUpdate: 'cascade',
  onDelete: 'cascade',
});
Users.hasMany(Hotels, {
  as: 'hotels',
  foreignKey: 'userId',
  onUpdate: 'cascade',
  onDelete: 'cascade',
});

_4de‍.d(Hotels);
